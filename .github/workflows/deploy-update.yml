name: Update AWS Lightsail Deployment

on:
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Update Type'
        required: true
        default: 'code'
        type: choice
        options:
          - code
          - config
          - ssl

jobs:
  update-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Copy updated code to Lightsail
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.LIGHTSAIL_HOST }}
          username: ${{ secrets.LIGHTSAIL_USER }}
          key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
          source: "."
          target: "/tmp/backend"
          strip_components: 1

      - name: Deploy update to AWS Lightsail
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.LIGHTSAIL_HOST }}
          username: ${{ secrets.LIGHTSAIL_USER }}
          key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
          script: |
            set -e
            
            echo "=== AWS LIGHTSAIL UPDATE DEPLOYMENT ==="
            echo "Update Type: ${{ github.event.inputs.update_type }}"
            echo "Current user: $(whoami)"
            echo "Current directory: $(pwd)"
            
            # Set variables
            APP_HOME="/opt/backend"
            BACKEND_DOMAIN="${{ secrets.BACKEND_DOMAIN }}"
            FRONTEND_DOMAIN="${{ secrets.FRONTEND_DOMAIN }}"
            STATIC_IP=$(curl -s http://checkip.amazonaws.com/)
            
            echo "Backend Domain: $BACKEND_DOMAIN"
            echo "Frontend Domain: $FRONTEND_DOMAIN"
            echo "Static IP: $STATIC_IP"
            
            # Move files from /tmp/backend to /opt/backend
            echo "=== Moving updated files to application directory ==="
            if [ -d "/tmp/backend" ]; then
              sudo rm -rf $APP_HOME/*
              sudo cp -r /tmp/backend/* $APP_HOME/
              sudo chown -R "$USER":"$USER" $APP_HOME
              sudo rm -rf /tmp/backend
              echo "Files moved successfully to $APP_HOME"
            else
              echo "Warning: /tmp/backend directory not found"
            fi
            
            cd $APP_HOME
            
            # Update type: code
            if [ "${{ github.event.inputs.update_type }}" = "code" ]; then
              echo "=== Updating application code ==="
              
              # Stop system Nginx to free up port 80
              echo "=== Stopping system Nginx ==="
              sudo systemctl stop nginx || true
              
              # Stop services (no heredoc)
              sg docker -c "docker-compose -f docker-compose.prod.yml down"
              
              # Update environment variables (write final values; no sed)
              echo "=== Updating environment configuration ==="
              printf "%s\n" \
              "NODE_ENV=production" \
              "APP_PORT=3000" \
              "APP_NAME=${{ secrets.APP_NAME }}" \
              "API_PREFIX=api" \
              "APP_FALLBACK_LANGUAGE=en" \
              "APP_HEADER_LANGUAGE=x-custom-lang" \
              "FRONTEND_DOMAIN=$FRONTEND_DOMAIN" \
              "BACKEND_DOMAIN=$BACKEND_DOMAIN" \
              "DATABASE_TYPE=postgres" \
              "DATABASE_HOST=postgres" \
              "DATABASE_PORT=5432" \
              "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME || secrets.POSTGRES_USER }}" \
              "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" \
              "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" \
              "DATABASE_SYNCHRONIZE=false" \
              "DATABASE_MAX_CONNECTIONS=100" \
              "DATABASE_SSL_ENABLED=false" \
              "DATABASE_REJECT_UNAUTHORIZED=false" \
              "DATABASE_CA=" \
              "DATABASE_KEY=" \
              "DATABASE_CERT=" \
              "DATABASE_URL=" \
              "FILE_DRIVER=${{ secrets.FILE_DRIVER }}" \
              "ACCESS_KEY_ID=${{ secrets.S3AWS_ACCESS_KEY_ID }}" \
              "SECRET_ACCESS_KEY=${{ secrets.S3AWS_SECRET_ACCESS_KEY }}" \
              "AWS_S3_REGION=${{ secrets.S3AWS_REGION }}" \
              "AWS_DEFAULT_S3_BUCKET=${{ secrets.S3AWS_DEFAULT_S3_BUCKET }}" \
              "AZURE_STORAGE_ACCOUNT_NAME=${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
              "AZURE_STORAGE_ACCOUNT_KEY=${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}" \
              "AZURE_CONTAINER_NAME=${{ secrets.AZURE_CONTAINER_NAME }}" \
              "AZURE_BLOB_SAS_EXPIRY_SECONDS=${{ secrets.AZURE_BLOB_SAS_EXPIRY_SECONDS }}" \
              "AZURE_BLOB_PUBLIC_BASE_URL=${{ secrets.AZURE_BLOB_PUBLIC_BASE_URL }}" \
              "AUTH_JWT_SECRET=secret" \
              "AUTH_JWT_TOKEN_EXPIRES_IN=15m" \
              "AUTH_REFRESH_SECRET=secret_for_refresh" \
              "AUTH_REFRESH_TOKEN_EXPIRES_IN=3650d" \
              "AUTH_FORGOT_SECRET=secret_for_forgot" \
              "AUTH_FORGOT_TOKEN_EXPIRES_IN=30m" \
              "AUTH_CONFIRM_EMAIL_SECRET=secret_for_confirm_email" \
              "AUTH_CONFIRM_EMAIL_TOKEN_EXPIRES_IN=1d" \
              "FACEBOOK_APP_ID=${{ secrets.FACEBOOK_APP_ID }}" \
              "FACEBOOK_APP_SECRET=${{ secrets.FACEBOOK_APP_SECRET }}" \
              "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" \
              "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" \
              "APPLE_APP_AUDIENCE=[]" \
              "WORKER_HOST=redis://redis:6379/1" \
              "REDIS_ENABLED=false" \
              "REDIS_HOST=redis" \
              "REDIS_PORT=6379" \
              "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" \
              "REDIS_DB=0" \
              "REDIS_TTL=3600" \
              "ZOOM_OAUTH_CLIENT_ID=${{ secrets.ZOOM_OAUTH_CLIENT_ID }}" \
              "ZOOM_OAUTH_CLIENT_SECRET=${{ secrets.ZOOM_OAUTH_CLIENT_SECRET }}" \
              "ZOOM_OAUTH_REDIRECT_URI=${{ secrets.ZOOM_OAUTH_REDIRECT_URI }}" \
              | sudo tee .env >/dev/null
              
              # Rebuild and start services (without health check dependencies)
              sg docker -c "docker-compose -f docker-compose.prod.yml build --no-cache app"
              sg docker -c "docker-compose -f docker-compose.prod.yml up -d postgres redis app"
              echo "Waiting for app to start..."
              sleep 30
              
              # Wait for services to be ready
              echo "=== Waiting for services to be ready ==="
              echo "Waiting for PostgreSQL..."
              sg docker -c "docker exec backend_app ./wait-for-it.sh postgres:5432 --timeout=60 --strict -- echo 'PostgreSQL is ready'"
              echo "Waiting for Redis..."
              sg docker -c "docker exec backend_app ./wait-for-it.sh redis:6379 --timeout=30 --strict -- echo 'Redis is ready'"
              echo "Waiting for App to be healthy..."
              timeout 60 bash -c 'until docker exec backend_app curl -sf http://localhost:3000/api/v1/health; do sleep 2; done' || echo "App health check timeout"
              echo "Application is ready"
              echo "Starting Nginx..."
              sg docker -c "docker-compose -f docker-compose.prod.yml up -d nginx"
              
              echo "=== Code update completed successfully ==="
            fi
            
            # Update type: config
            if [ "${{ github.event.inputs.update_type }}" = "config" ]; then
              echo "=== Updating configuration ==="
              
              # Update environment variables (safe heredoc + substitutions)
              echo "=== Updating environment configuration ==="
              sudo tee .env >/dev/null <<'ENVEOF'
              NODE_ENV=production
              APP_PORT=3000
              APP_NAME=__APP_NAME__
              API_PREFIX=api
              APP_FALLBACK_LANGUAGE=en
              APP_HEADER_LANGUAGE=x-custom-lang
              FRONTEND_DOMAIN=__FRONTEND_DOMAIN__
              BACKEND_DOMAIN=__BACKEND_DOMAIN__
              DATABASE_TYPE=postgres
              DATABASE_HOST=postgres
              DATABASE_PORT=5432
              DATABASE_USERNAME=__DB_USER__
              DATABASE_PASSWORD=__DB_PASS__
              DATABASE_NAME=__DB_NAME__
              DATABASE_SYNCHRONIZE=false
              DATABASE_MAX_CONNECTIONS=100
              DATABASE_SSL_ENABLED=false
              DATABASE_REJECT_UNAUTHORIZED=false
              DATABASE_CA=
              DATABASE_KEY=
              DATABASE_CERT=
              DATABASE_URL=
              FILE_DRIVER=__FILE_DRIVER__
              ACCESS_KEY_ID=__S3_KEY__
              SECRET_ACCESS_KEY=__S3_SECRET__
              AWS_S3_REGION=__S3_REGION__
              AWS_DEFAULT_S3_BUCKET=__S3_BUCKET__
              AZURE_STORAGE_ACCOUNT_NAME=__AZURE_ACC__
              AZURE_STORAGE_ACCOUNT_KEY=__AZURE_KEY__
              AZURE_CONTAINER_NAME=__AZURE_CONTAINER__
              AZURE_BLOB_SAS_EXPIRY_SECONDS=__AZURE_SAS_EXPIRY__
              AZURE_BLOB_PUBLIC_BASE_URL=__AZURE_PUBLIC_BASE__
              AUTH_JWT_SECRET=secret
              AUTH_JWT_TOKEN_EXPIRES_IN=15m
              AUTH_REFRESH_SECRET=secret_for_refresh
              AUTH_REFRESH_TOKEN_EXPIRES_IN=3650d
              AUTH_FORGOT_SECRET=secret_for_forgot
              AUTH_FORGOT_TOKEN_EXPIRES_IN=30m
              AUTH_CONFIRM_EMAIL_SECRET=secret_for_confirm_email
              AUTH_CONFIRM_EMAIL_TOKEN_EXPIRES_IN=1d
              FACEBOOK_APP_ID=__FACEBOOK_APP_ID__
              FACEBOOK_APP_SECRET=__FACEBOOK_APP_SECRET__
              GOOGLE_CLIENT_ID=__GOOGLE_CLIENT_ID__
              GOOGLE_CLIENT_SECRET=__GOOGLE_CLIENT_SECRET__
              APPLE_APP_AUDIENCE=[]
              WORKER_HOST=redis://redis:6379/1
              REDIS_ENABLED=false
              REDIS_HOST=redis
              REDIS_PORT=6379
              REDIS_PASSWORD=__REDIS_PASSWORD__
              REDIS_DB=0
              REDIS_TTL=3600
              ZOOM_OAUTH_CLIENT_ID=__ZOOM_ID__
              ZOOM_OAUTH_CLIENT_SECRET=__ZOOM_SECRET__
              ZOOM_OAUTH_REDIRECT_URI=__ZOOM_REDIRECT__
              ENVEOF

              sudo sed -i \
                -e "s|__APP_NAME__|${{ secrets.APP_NAME }}|g" \
                -e "s|__FRONTEND_DOMAIN__|$FRONTEND_DOMAIN|g" \
                -e "s|__BACKEND_DOMAIN__|$BACKEND_DOMAIN|g" \
                -e "s|__DB_USER__|${{ secrets.DATABASE_USERNAME || secrets.POSTGRES_USER }}|g" \
                -e "s|__DB_PASS__|${{ secrets.DATABASE_PASSWORD }}|g" \
                -e "s|__DB_NAME__|${{ secrets.DATABASE_NAME }}|g" \
                -e "s|__FILE_DRIVER__|${{ secrets.FILE_DRIVER }}|g" \
                -e "s|__S3_KEY__|${{ secrets.S3AWS_ACCESS_KEY_ID }}|g" \
                -e "s|__S3_SECRET__|${{ secrets.S3AWS_SECRET_ACCESS_KEY }}|g" \
                -e "s|__S3_REGION__|${{ secrets.S3AWS_REGION }}|g" \
                -e "s|__S3_BUCKET__|${{ secrets.S3AWS_DEFAULT_S3_BUCKET }}|g" \
                -e "s|__AZURE_ACC__|${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}|g" \
                -e "s|__AZURE_KEY__|${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}|g" \
                -e "s|__AZURE_CONTAINER__|${{ secrets.AZURE_CONTAINER_NAME }}|g" \
                -e "s|__AZURE_SAS_EXPIRY__|${{ secrets.AZURE_BLOB_SAS_EXPIRY_SECONDS }}|g" \
                -e "s|__AZURE_PUBLIC_BASE__|${{ secrets.AZURE_BLOB_PUBLIC_BASE_URL }}|g" \
                -e "s|__FACEBOOK_APP_ID__|${{ secrets.FACEBOOK_APP_ID }}|g" \
                -e "s|__FACEBOOK_APP_SECRET__|${{ secrets.FACEBOOK_APP_SECRET }}|g" \
                -e "s|__GOOGLE_CLIENT_ID__|${{ secrets.GOOGLE_CLIENT_ID }}|g" \
                -e "s|__GOOGLE_CLIENT_SECRET__|${{ secrets.GOOGLE_CLIENT_SECRET }}|g" \
                -e "s|__REDIS_PASSWORD__|${{ secrets.REDIS_PASSWORD }}|g" \
                -e "s|__ZOOM_ID__|${{ secrets.ZOOM_OAUTH_CLIENT_ID }}|g" \
                -e "s|__ZOOM_SECRET__|${{ secrets.ZOOM_OAUTH_CLIENT_SECRET }}|g" \
                -e "s|__ZOOM_REDIRECT__|${{ secrets.ZOOM_OAUTH_REDIRECT_URI }}|g" .env
              
              # Restart services with new configuration
              sg docker -c "docker-compose -f docker-compose.prod.yml restart app"
                            
              echo "=== Configuration update completed successfully ==="
              fi
              
              # Update type: ssl
              if [ "${{ github.event.inputs.update_type }}" = "ssl" ]; then
                echo "=== Updating SSL certificates ==="
                
              # Stop nginx temporarily
              sg docker -c "docker-compose -f docker-compose.prod.yml stop nginx"
                            
              # Renew certificates
              sudo certbot renew --standalone --non-interactive
              
              # Start nginx
              sg docker -c "docker-compose -f docker-compose.prod.yml start nginx"
                            
              echo "=== SSL certificate update completed successfully ==="
            fi
            
            # Health check
            echo "=== Performing health check ==="
            sleep 10
            
            if curl -sf http://localhost:3000/api/v1/health > /dev/null 2>&1; then
              echo "Health check passed - Application is running"
            else
              echo "Health check failed - Application may not be running properly"
            fi
            
            # Cleanup old images
            echo "=== Cleaning up old Docker images ==="
            docker image prune -f || true
            
            echo "=== UPDATE DEPLOYMENT COMPLETED SUCCESSFULLY ==="
            echo "Backend is running on: https://$BACKEND_DOMAIN"
            echo "Static IP: https://$STATIC_IP"
            echo "Health check: https://$BACKEND_DOMAIN/health"
