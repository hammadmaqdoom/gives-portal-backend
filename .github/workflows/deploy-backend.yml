name: Deploy Backend to Azure VM

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup deploy key on VM
        uses: appleboy/ssh-action@v1.0.3
        env:
          G_H_DEPLOYKEY: ${{ secrets.G_H_DEPLOYKEY }}
          G_H_PRIVKEY: ${{ secrets.G_H_PRIVKEY }}
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          envs: G_H_DEPLOYKEY,G_H_PRIVKEY
          script: |
            # Create .ssh directory
            mkdir -p ~/.ssh
            chmod 700 ~/.ssh
            
            # Ensure deploy key is present via env
            if [ -z "$G_H_DEPLOYKEY" ]; then
              echo "Deploy key is empty (G_H_DEPLOYKEY)." >&2
              exit 1
            fi

            # Write deploy key (normalize CRLF) to avoid libcrypto errors
            printf "%s" "$G_H_DEPLOYKEY" | tr -d '\r' > ~/.ssh/deploy_key
            chmod 600 ~/.ssh/deploy_key

            # Optionally write an additional GitHub SSH private key (if provided)
            if [ -n "$G_H_PRIVKEY" ]; then
              printf "%s" "$G_H_PRIVKEY" | tr -d '\r' > ~/.ssh/github_key
              chmod 600 ~/.ssh/github_key
            fi

      - name: Deploy over SSH to Azure VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          script_stop: true
          script: |
            set -e
            
            echo "=== STEP 1: Starting deployment script ==="
            echo "Current working directory: $(pwd)"
            echo "Current user: $(whoami)"
            
            echo "=== STEP 2: Setting up app directory ==="
            APP_HOME=/opt/backend
            sudo mkdir -p $APP_HOME
            echo "App directory set to: $APP_HOME"

            echo "=== STEP 3: Setting up GitHub deploy key ==="
            # Create .ssh directory if it doesn't exist
            mkdir -p ~/.ssh
            chmod 700 ~/.ssh
            
            # Add GitHub to known hosts
            ssh-keyscan -H github.com >> ~/.ssh/known_hosts
            
            # Configure git to use deploy key
            echo "Host github.com" >> ~/.ssh/config
            echo "  HostName github.com" >> ~/.ssh/config
            echo "  User git" >> ~/.ssh/config
            echo "  IdentityFile ~/.ssh/deploy_key" >> ~/.ssh/config
            if [ -f ~/.ssh/github_key ]; then
              echo "  IdentityFile ~/.ssh/github_key" >> ~/.ssh/config
            fi
            echo "  IdentitiesOnly yes" >> ~/.ssh/config
            chmod 600 ~/.ssh/config
            
            echo "=== STEP 4: Cloning backend code ==="
            echo "Cloning backend code from GitHub using deploy key..."
            # Ensure target directory is empty (remove and recreate to include dotfiles)
            sudo rm -rf $APP_HOME
            sudo mkdir -p $APP_HOME
            sudo chown "$USER":"$USER" $APP_HOME

            # Clone the repository using deploy key (force identity usage)
            export GIT_SSH_COMMAND="ssh -i ~/.ssh/deploy_key -o IdentitiesOnly=yes -o StrictHostKeyChecking=no"
            sudo -u $USER GIT_SSH_COMMAND="$GIT_SSH_COMMAND" git clone git@github.com:${{ github.repository }}.git $APP_HOME
            cd $APP_HOME
            
            # Checkout the specific commit that triggered this workflow
            git checkout ${{ github.sha }}
            
            echo "Backend code cloned successfully"

            echo "=== STEP 4: Checking .env file ==="
            if [ ! -f "$APP_HOME/.env" ]; then
              echo "Creating new .env file"
              : | sudo tee $APP_HOME/.env >/dev/null
              printf "%s\n" "NODE_ENV=production" | sudo tee -a $APP_HOME/.env >/dev/null
              printf "%s\n" "APP_PORT=3000" | sudo tee -a $APP_HOME/.env >/dev/null
              printf "%s\n" "APP_NAME=${{ secrets.APP_NAME }}" | sudo tee -a $APP_HOME/.env >/dev/null
              printf "%s\n" "API_PREFIX=api" | sudo tee -a $APP_HOME/.env >/dev/null
              printf "%s\n" "APP_FALLBACK_LANGUAGE=en" | sudo tee -a $APP_HOME/.env >/dev/null
              printf "%s\n" "APP_HEADER_LANGUAGE=x-custom-lang" | sudo tee -a $APP_HOME/.env >/dev/null

              # Database
              printf "%s\n" "DATABASE_TYPE=postgres" | sudo tee -a $APP_HOME/.env >/dev/null
              printf "%s\n" "DATABASE_HOST=pgbouncer" | sudo tee -a $APP_HOME/.env >/dev/null
              printf "%s\n" "DATABASE_PORT=6432" | sudo tee -a $APP_HOME/.env >/dev/null
              printf "%s\n" "DATABASE_USERNAME=${{ secrets.POSTGRES_USER }}" | sudo tee -a $APP_HOME/.env >/dev/null
              printf "%s\n" "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" | sudo tee -a $APP_HOME/.env >/dev/null
              printf "%s\n" "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" | sudo tee -a $APP_HOME/.env >/dev/null
              printf "%s\n" "DATABASE_SYNCHRONIZE=false" | sudo tee -a $APP_HOME/.env >/dev/null

              # File storage
              printf "%s\n" "FILE_DRIVER=${{ secrets.FILE_DRIVER }}" | sudo tee -a $APP_HOME/.env >/dev/null

              # Azure (if using azure-blob-sas)
              printf "%s\n" "AZURE_STORAGE_ACCOUNT_NAME=${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" | sudo tee -a $APP_HOME/.env >/dev/null
              printf "%s\n" "AZURE_STORAGE_ACCOUNT_KEY=${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}" | sudo tee -a $APP_HOME/.env >/dev/null
              printf "%s\n" "AZURE_CONTAINER_NAME=${{ secrets.AZURE_CONTAINER_NAME }}" | sudo tee -a $APP_HOME/.env >/dev/null
              printf "%s\n" "AZURE_BLOB_SAS_EXPIRY_SECONDS=3600" | sudo tee -a $APP_HOME/.env >/dev/null

              # JWT (set via repo secrets or leave empty to use defaults)
              printf "%s\n" "AUTH_JWT_SECRET=${{ secrets.AUTH_JWT_SECRET }}" | sudo tee -a $APP_HOME/.env >/dev/null
              printf "%s\n" "AUTH_REFRESH_SECRET=${{ secrets.AUTH_REFRESH_SECRET }}" | sudo tee -a $APP_HOME/.env >/dev/null
              printf "%s\n" "AUTH_FORGOT_SECRET=${{ secrets.AUTH_FORGOT_SECRET }}" | sudo tee -a $APP_HOME/.env >/dev/null
              printf "%s\n" "AUTH_CONFIRM_EMAIL_SECRET=${{ secrets.AUTH_CONFIRM_EMAIL_SECRET }}" | sudo tee -a $APP_HOME/.env >/dev/null

              # Optional domains and Zoom OAuth
              printf "%s\n" "BACKEND_DOMAIN=${{ secrets.BACKEND_DOMAIN }}" | sudo tee -a $APP_HOME/.env >/dev/null
              printf "%s\n" "FRONTEND_DOMAIN=${{ secrets.FRONTEND_DOMAIN }}" | sudo tee -a $APP_HOME/.env >/dev/null
              printf "%s\n" "ZOOM_OAUTH_CLIENT_ID=${{ secrets.ZOOM_OAUTH_CLIENT_ID }}" | sudo tee -a $APP_HOME/.env >/dev/null
              printf "%s\n" "ZOOM_OAUTH_CLIENT_SECRET=${{ secrets.ZOOM_OAUTH_CLIENT_SECRET }}" | sudo tee -a $APP_HOME/.env >/dev/null
              printf "%s\n" "ZOOM_OAUTH_REDIRECT_URI=${{ secrets.ZOOM_OAUTH_REDIRECT_URI }}" | sudo tee -a $APP_HOME/.env >/dev/null

              # PgBouncer tuning (optional)
              printf "%s\n" "PGBOUNCER_DEFAULT_POOL_SIZE=20" | sudo tee -a $APP_HOME/.env >/dev/null
              printf "%s\n" "PGBOUNCER_POOL_MODE=transaction" | sudo tee -a $APP_HOME/.env >/dev/null
              printf "%s\n" "PGBOUNCER_MAX_CLIENT_CONN=200" | sudo tee -a $APP_HOME/.env >/dev/null
            else
              echo ".env file already exists, keeping existing configuration"
            fi

            echo "=== STEP 5: Building and starting services ==="
            docker compose -f $APP_HOME/docker-compose.yml down || true
            docker compose -f $APP_HOME/docker-compose.yml build --no-cache
            docker compose -f $APP_HOME/docker-compose.yml up -d

            echo "=== STEP 6: Cleanup ==="
            docker image prune -f || true

            echo "=== DEPLOYMENT COMPLETED SUCCESSFULLY ==="