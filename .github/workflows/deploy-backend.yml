name: Deploy Backend to Azure VM

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy over SSH to Azure VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          script_stop: true
          script: |
            set -e
            
            echo "=== STEP 1: Starting deployment script ==="
            echo "Current working directory: $(pwd)"
            echo "Current user: $(whoami)"
            
            echo "=== STEP 2: Setting up app directory ==="
            APP_HOME=/opt/backend
            sudo mkdir -p $APP_HOME
            echo "App directory set to: $APP_HOME"

            echo "=== STEP 3: Copying backend code ==="
            echo "Copying backend code from GitHub to VM..."
            rsync -avz --delete --exclude='.git/' --exclude='node_modules/' --exclude='dist/' --exclude='.env' . $APP_HOME/
            cd $APP_HOME
            echo "Backend code copied successfully"

            echo "=== STEP 4: Checking .env file ==="
            if [ ! -f "$APP_HOME/.env" ]; then
              echo "Creating new .env file"
              sudo tee $APP_HOME/.env >/dev/null <<ENV
              NODE_ENV=production
              APP_PORT=3000
              APP_NAME=${{ secrets.APP_NAME }}
              API_PREFIX=api
              APP_FALLBACK_LANGUAGE=en
              APP_HEADER_LANGUAGE=x-custom-lang

              # Database
              DATABASE_TYPE=postgres
              DATABASE_HOST=pgbouncer
              DATABASE_PORT=6432
              DATABASE_USERNAME=${{ secrets.POSTGRES_USER }}
              DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
              DATABASE_NAME=${{ secrets.DATABASE_NAME }}
              DATABASE_SYNCHRONIZE=false

              # File storage
              FILE_DRIVER=${{ secrets.FILE_DRIVER }}

              # Azure (if using azure-blob-sas)
              AZURE_STORAGE_ACCOUNT_NAME=${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}
              AZURE_STORAGE_ACCOUNT_KEY=${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}
              AZURE_CONTAINER_NAME=${{ secrets.AZURE_CONTAINER_NAME }}
              AZURE_BLOB_SAS_EXPIRY_SECONDS=3600

              # JWT (set via repo secrets or leave empty to use defaults)
              AUTH_JWT_SECRET=${{ secrets.AUTH_JWT_SECRET }}
              AUTH_REFRESH_SECRET=${{ secrets.AUTH_REFRESH_SECRET }}
              AUTH_FORGOT_SECRET=${{ secrets.AUTH_FORGOT_SECRET }}
              AUTH_CONFIRM_EMAIL_SECRET=${{ secrets.AUTH_CONFIRM_EMAIL_SECRET }}

              # Optional domains and Zoom OAuth
              BACKEND_DOMAIN=${{ secrets.BACKEND_DOMAIN }}
              FRONTEND_DOMAIN=${{ secrets.FRONTEND_DOMAIN }}
              ZOOM_OAUTH_CLIENT_ID=${{ secrets.ZOOM_OAUTH_CLIENT_ID }}
              ZOOM_OAUTH_CLIENT_SECRET=${{ secrets.ZOOM_OAUTH_CLIENT_SECRET }}
              ZOOM_OAUTH_REDIRECT_URI=${{ secrets.ZOOM_OAUTH_REDIRECT_URI }}

              # PgBouncer tuning (optional)
              PGBOUNCER_DEFAULT_POOL_SIZE=20
              PGBOUNCER_POOL_MODE=transaction
              PGBOUNCER_MAX_CLIENT_CONN=200
              ENV
            else
              echo ".env file already exists, keeping existing configuration"
            fi

            echo "=== STEP 5: Building and starting services ==="
            docker compose -f $APP_HOME/docker-compose.yml down || true
            docker compose -f $APP_HOME/docker-compose.yml build --no-cache
            docker compose -f $APP_HOME/docker-compose.yml up -d

            echo "=== STEP 6: Cleanup ==="
            docker image prune -f || true

            echo "=== DEPLOYMENT COMPLETED SUCCESSFULLY ==="